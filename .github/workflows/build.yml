name: build

on:
  push:
    branches: [main, dev]
    paths-ignore:
      - 'Docs/**'       # Docs folder in root of repo
      - '**/*.md'       # .md files anywhere in the repo
      - '**/LICENSE'    # LICENSE files anywhere in the repo
      - '**/.gitignore' # .gitignore files anywhere in the repo
      
  pull_request:
    branches: [main]
    paths-ignore:
      - 'Docs/**'       # Docs folder in root of repo
      - '**/*.md'       # .md files anywhere in the repo
      - '**/LICENSE'    # LICENSE files anywhere in the repo
      - '**/.gitignore' # .gitignore files anywhere in the repo
      
  workflow_dispatch:
    
  schedule:
  - cron: '30 11 * * *'   # once a day @ 11:30am UTC (4:30am PST)

jobs: 
  macOS-12:
    name: macOS 12 Monterey
    runs-on: macos-12
    steps:
    - uses: actions/checkout@main
    - name: Build
      run: xcodebuild build -workspace ".swiftpm/xcode/package.xcworkspace" -scheme "OTCore-CI" -destination "generic/platform=macOS,name=Any Mac" | xcpretty && exit ${PIPESTATUS[0]}
    - name: Unit Tests
      run: xcodebuild test -workspace ".swiftpm/xcode/package.xcworkspace" -scheme "OTCore-CI" -destination "platform=macOS" | xcpretty && exit ${PIPESTATUS[0]}
      
  macOS-13:
    name: macOS 13 Ventura
    runs-on: macos-13
    steps:
    - uses: actions/checkout@main
    - name: Build
      run: xcodebuild build -workspace ".swiftpm/xcode/package.xcworkspace" -scheme "OTCore-CI" -destination "generic/platform=macOS,name=Any Mac" | xcpretty && exit ${PIPESTATUS[0]}
    - name: Unit Tests
      run: xcodebuild test -workspace ".swiftpm/xcode/package.xcworkspace" -scheme "OTCore-CI" -destination "platform=macOS" | xcpretty && exit ${PIPESTATUS[0]}

  macOS-14:
    name: macOS 14 Sonoma
    runs-on: macos-14
    steps:
    - uses: actions/checkout@main
      with:
        xcode-version: latest-stable # Useful when a newer version of Xcode is available in the GitHub host environment, but has not been made default yet by GitHubX
    - name: Build
      run: xcodebuild build -workspace ".swiftpm/xcode/package.xcworkspace" -scheme "OTCore-CI" -destination "generic/platform=macOS,name=Any Mac" | xcpretty && exit ${PIPESTATUS[0]}
    - name: Unit Tests
      run: xcodebuild test -workspace ".swiftpm/xcode/package.xcworkspace" -scheme "OTCore-CI" -destination "platform=macOS" | xcpretty && exit ${PIPESTATUS[0]}
      
  macCatalyst:
    name: macCatalyst
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@main
      with:
        xcode-version: latest-stable # Useful when a newer version of Xcode is available in the GitHub host environment, but has not been made default yet by GitHubX
    - name: Build
      run: xcodebuild build -workspace ".swiftpm/xcode/package.xcworkspace" -scheme "OTCore-CI" -destination "generic/platform=macOS,variant=Mac Catalyst,name=Any Mac" | xcpretty && exit ${PIPESTATUS[0]}
    - name: Unit Tests
      run: xcodebuild test -workspace ".swiftpm/xcode/package.xcworkspace" -scheme "OTCore-CI" -destination "platform=macOS,variant=Mac Catalyst" | xcpretty && exit ${PIPESTATUS[0]}

  iOS:
    name: iOS
    runs-on: macos-latest # this must be macos, GitHub does not offer iOS directly but we can use xcodebuild
    steps:
    - uses: actions/checkout@main
      with:
        xcode-version: latest-stable # Useful when a newer version of Xcode is available in the GitHub host environment, but has not been made default yet by GitHubX
    - name: iPhone 12 Simulator - Build
      run: xcodebuild build -workspace ".swiftpm/xcode/package.xcworkspace" -scheme "OTCore-CI" -destination "generic/platform=iOS Simulator,name=Any iOS Device" | xcpretty && exit ${PIPESTATUS[0]}
    - name: iPhone 12 Simulator - Unit Tests
      run: xcodebuild test -workspace ".swiftpm/xcode/package.xcworkspace" -scheme "OTCore-CI" -destination "platform=iOS Simulator,name=iPhone 12" | xcpretty && exit ${PIPESTATUS[0]}

  tvOS:
    name: tvOS
    runs-on: macos-latest # this must be macos, GitHub does not offer tvOS directly but we can use xcodebuild
    steps:
    - uses: actions/checkout@main
      with:
        xcode-version: latest-stable # Useful when a newer version of Xcode is available in the GitHub host environment, but has not been made default yet by GitHubX
    - name: Apple TV - Build
      run: xcodebuild build -workspace ".swiftpm/xcode/package.xcworkspace" -scheme "OTCore-CI" -destination "generic/platform=tvOS Simulator,name=Any tvOS Simulator Device" | xcpretty && exit ${PIPESTATUS[0]}
    - name: Apple TV - Unit Tests
      run: xcodebuild test -workspace ".swiftpm/xcode/package.xcworkspace" -scheme "OTCore-CI" -destination "platform=tvOS Simulator,name=Apple TV 4K (2nd generation)" | xcpretty && exit ${PIPESTATUS[0]}

  watchOS:
    name: watchOS
    runs-on: macos-latest # this must be macos, GitHub does not offer watchOS directly but we can use xcodebuild
    steps:
    - uses: actions/checkout@main
      with:
        xcode-version: latest-stable # Useful when a newer version of Xcode is available in the GitHub host environment, but has not been made default yet by GitHubX
    - name: Apple Watch - Build
      run: xcodebuild build -workspace ".swiftpm/xcode/package.xcworkspace" -scheme "OTCore-CI" -destination "generic/platform=watchOS Simulator,name=Any watchOS Simulator Device" | xcpretty && exit ${PIPESTATUS[0]}
    - name: Apple Watch - Unit Tests
      run: xcodebuild test -workspace ".swiftpm/xcode/package.xcworkspace" -scheme "OTCore-CI" -destination "platform=watchOS Simulator,name=Apple Watch Series 8 (45mm)" | xcpretty && exit ${PIPESTATUS[0]}

# xcodebuild test reference:
# https://developer.apple.com/library/archive/documentation/DeveloperTools/Conceptual/testing_with_xcode/chapters/08-automation.html
